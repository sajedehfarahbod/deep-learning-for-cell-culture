import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset, random_split
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import pandas as pd
import matplotlib.pyplot as plt
from torch.utils.data import DataLoader, TensorDataset
data = pd.read_csv("data1.csv")
data
data.info()
data.describe()
data.hist(bins=40, figsize=(11,7))
X = data.iloc[:, :-1].values  # All columns except the last one (features)
y = data.iloc[:, -1].values   # The last column (target)
# Convert to PyTorch tensors
X_tensor = torch.tensor(X, dtype=torch.float32)
y_tensor = torch.tensor(y, dtype=torch.float32).view(-1, 1)  # Reshape to (N, 1)
dataset = TensorDataset(X_tensor, y_tensor)
train_size = int(0.8 * len(dataset))
test_size = len(dataset) - train_size
train_dataset, test_dataset = random_split(dataset, [train_size, test_size])

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)
class CellCultureModel(nn.Module):
    def __init__(self):
        super(CellCultureModel, self).__init__()
        self.fc1 = nn.Linear(5, 64)  # Update this to 5 input features
        self.fc2 = nn.Linear(64, 32)
        self.fc3 = nn.Linear(32, 1)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# Instantiate the model with the correct input size
model = CellCultureModel()
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)
num_epochs = 100
for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    for inputs, targets in train_loader:
        print(f"Input shape: {inputs.shape}")
        print(f"Target shape: {targets.shape}")

        # No need to reshape inputs here since the model now expects 5 features
        # inputs = inputs.view(-1, 5)  # Already [batch_size, 5]

        optimizer.zero_grad()  # Zero the gradients
        outputs = model(inputs)  # Forward pass

        # Check output shape as well
        print(f"Output shape: {outputs.shape}")

        loss = criterion(outputs, targets)  # Compute the loss
        loss.backward()  # Backpropagation
        optimizer.step()  # Update the weights

        running_loss += loss.item()

    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}')
model.eval()  # Set the model to evaluation mode
test_loss = 0.0
actual_values = []
predicted_values = []
with torch.no_grad():  # No need to compute gradients during evaluation
    for inputs, targets in test_loader:
        outputs = model(inputs)
        loss = criterion(outputs, targets)
        test_loss += loss.item()

        actual_values.extend(targets.numpy())
        predicted_values.extend(outputs.numpy())
print(f'Mean Test Loss: {test_loss/len(test_loader):.4f}')
model = nn.Sequential(
    nn.Linear(6, 64),  # Adjusted input size
    nn.ReLU(),
    # ... other layers
)
new_data = torch.tensor([[0.5, 0.2, 0.8, 0.3, 0.7, 0.1]], dtype=torch.float32)
model.eval()
with torch.no_grad():
    prediction = model(new_data)
    print(f'Prediction: {prediction}')
# Convert lists to numpy arrays for plotting
actual_values = np.array(actual_values)
predicted_values = np.array(predicted_values)

# Plotting Actual vs Predicted values
plt.figure(figsize=(8, 6))
plt.scatter(actual_values, predicted_values, color='blue', label='Predicted vs Actual')
plt.plot([actual_values.min(), actual_values.max()], [actual_values.min(), actual_values.max()], 'k--', lw=2, label='Ideal Fit')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted Values')
plt.legend()
plt.show()
